## Note ##

# 1) Inside a profile file, variable ${PROFILE_FOLDER} is available.
#    We can use "source ${PROFILE_FOLDER}/<profile-name>.profile" to import another profile.
# 2) Profile name cannot content space( ), dot(.) or slash(/) symbol,
#    please underscore(_) or dash(-) instead.

## Global Constant ##

PROFILE_FOLDER="${HOME}/.aws/profiles"
DEFAULT_PROFILE_FILE="${PROFILE_FOLDER}/default"

## Public Functions ##

# Show current profile config
# [Parameters]
# None
function aws-profile-show
{
    cat <<EOF
AWS_REGION=${AWS_REGION}
AWS_ACCOUNT=${AWS_ACCOUNT}
AWS_INS_TYPE=${AWS_INS_TYPE}
AWS_DISK_SIZE_IN_GB=${AWS_DISK_SIZE_IN_GB}
AWS_PROXY_LOCAL_PORT=${AWS_PROXY_LOCAL_PORT}
AWS_SSH_USER=${AWS_SSH_USER}
AWS_USER_DATA_FILE=${AWS_USER_DATA_FILE}
AWS_BOOT_DISK=${AWS_BOOT_DISK}
AWS_SEC_GRP_ID=${AWS_SEC_GRP_ID}
AWS_IMG_ID=${AWS_IMG_ID}
AWS_SSH_KEY_NAME=${AWS_SSH_KEY_NAME}
AWS_SSH_KEY_PATH=${AWS_SSH_KEY_PATH}
AWS_S3_BUCKET=${AWS_S3_BUCKET}
EOF
}

# Save current profile as default config
# [Parameters]
# None
function aws-profile-save
{
    printf "Overwrite default profile config ? (N/Y) " 
    read COMFIRM_OVERWRITE
    if [[ "${COMFIRM_OVERWRITE}" = "y" || "${COMFIRM_OVERWRITE}" = "Y" ]]; then
        aws-profile-show > ${DEFAULT_PROFILE_FILE}
        echo "Profile saved as default config."
    fi
}

# Save current config to a new profile
# [Parameters]
# $1 - name of profile to save
function aws-profile-save-as
{
    profileName=${1}
    profileFile="${PROFILE_FOLDER}/${profileName}.profile"
    aws-profile-show > ${profileFile}
    echo "Profile saved as \"${profileName}\""
}

# List all available profiles
# [Parameters]
# None
function aws-profile-list
{
    ls ${PROFILE_FOLDER} | grep '\.profile$' | grep -o '^[^.]\+'
}

# Apply user profiles
# [Parameters]
# ${1} - list of profile names to apply
function aws-profile-apply
{
    if [ "${1}" = "" ]; then echo "At least one profile name needed ..."; return; fi
    for p in ${*}; do
        profileName=${p}
        profileFile="${PROFILE_FOLDER}/${profileName}.profile"
        if [ -e ${profileFile} ]; then
            _source_profile_file ${profileFile}
            echo "Profile ${profileName} applied."
        else
            echo "[ERR] Profile ${profileName} not exist !"
        fi
    done
}

# Edit current profile
# [Parameters]
# None
function aws-profile-edit
{
    tmpProfileFile=$(mktemp)
    aws-profile-show > ${tmpProfileFile}
    EDITOR=${EDITOR:-vi}
    ${EDITOR} ${tmpProfileFile}
    _source_profile_file ${tmpProfileFile}
    rm -f ${tmpProfileFile}
}

# Delete an user profile
# [Parameters]
# $1 - name of profile
function aws-profile-delete
{
    profileName=${1}
    profileFile="${PROFILE_FOLDER}/${profileName}.profile"
    if [ -e ${profileFile} ]; then
        rm -f ${profileFile}
        echo "Profile ${profileName} deleted."
    else
        echo "[ERR] Profile ${profileName} not exist !"
    fi
}

## Private Functions ##

# Apply specified profile file
# [Parameters]
# $1 - profile file path
function _source_profile_file
{
    source ${1}
    _update_global_parameters
    if [ "${AWS_ACCOUNT}" != "" ]; then aws-account-switch ${AWS_ACCOUNT}; fi
    if [ "${AWS_REGION}" != "" ]; then aws-region-switch ${AWS_REGION}; fi
}

## Init Script ##

if [ ! -d ${PROFILE_FOLDER} ]; then mkdir -p ${PROFILE_FOLDER}; fi
if [ ! -e ${DEFAULT_PROFILE_FILE} ]; then cat <<EOF >${DEFAULT_PROFILE_FILE}
AWS_REGION=
AWS_ACCOUNT=
AWS_INS_TYPE=t2.micro
AWS_DISK_SIZE_IN_GB=8
AWS_PROXY_LOCAL_PORT=22000
AWS_SSH_USER=ubuntu
AWS_USER_DATA_FILE=
AWS_BOOT_DISK=sda1
AWS_SEC_GRP_ID=default
AWS_IMG_ID=ami-12345678
AWS_SSH_KEY_NAME=flin
AWS_SSH_KEY_PATH=${HOME}/.ssh/flin.pem
AWS_S3_BUCKET=flin
EOF
fi
_source_profile_file ${DEFAULT_PROFILE_FILE}
